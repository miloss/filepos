#!/usr/bin/env node


// Example:
// stackpos error@https://domain.com/path/to/file.js:3:42

const DEFAULT_CONTEXT = 100;

const USAGE = `Usage: stackpos <path> [options]

Options:
  -c, --context         Length of surrounding context to fetch, default ${DEFAULT_CONTEXT} (chars)`;

const argv = require('argh').argv;
const https = require('https');

// If nothing passed - print usage instructions
if (!argv.argv || !argv.argv.length) {
    console.log(USAGE);
    process.exit(0);
}

const CONTEXT = argv.c ? parseInt(argv.argv[1], 10) : DEFAULT_CONTEXT;

const string = argv.argv[0];

main(string);

function main(string) {
    const parts = string.split('@');
    const urlParts = parts[parts.length - 1].split(':');

    const colNo = parseInt(urlParts[urlParts.length - 1], 10);
    const lineNo = parseInt(urlParts[urlParts.length - 2], 10);
    const url = urlParts.slice(0, -2).join(':');

    readUrl(url, data => {
        printPosition(data, lineNo, colNo);
    });
}

function readUrl(url, done) {
    https.get(url, (resp) => {
        let data = '';

        // A chunk of data has been recieved
        resp.on('data', (chunk) => {
            data += chunk;
        });

        // The whole response has been received. Print out the result
        resp.on('end', () => {
            done(data);
        });

    }).on('error', (err) => {
        console.error(err.message);
    });
}

function printPosition(data, lineNo, colNo) {
    const lines = data.split('\n');
    const line = lines[lineNo - 1];

    const fill = Array(CONTEXT - 1).fill(' ').join('') + 'â†“';
    const string = line.substr(colNo - CONTEXT, 2 * CONTEXT);

    // Print result
    console.log(fill);
    console.log(string);
}
