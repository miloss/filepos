#!/usr/bin/env node


// Example:
// filepos error@https://domain.com/path/to/file.js:3:42

const DEFAULT_CONTEXT = 100;

const USAGE = `Usage: filepos <path> [options]

Options:
  -c, --context         Length of surrounding context to fetch, default ${DEFAULT_CONTEXT} (chars)
  -v                    Print version number`;

const argv = require('argh').argv;
const https = require('https');

// Print version number
if (argv.v) {
    console.log(require('../package.json').version);
    process.exit(0);
}

// If nothing passed - print usage instructions
if (!argv.argv || !argv.argv.length) {
    console.log(USAGE);
    process.exit(0);
}

const CONTEXT = argv.c ? parseInt(argv.argv[1], 10) : DEFAULT_CONTEXT;
const TERMINAL_REVERSE_COLOR = '\x1b[7m';
const string = argv.argv[0];

main(string, (string, ndx) => {
    // Print result
    const result = `${string.substr(0, ndx)}\x1b[7m${string[ndx]}${string.substr(ndx + 1)}`;
    console.log(result);
});

function main(string, done) {
    const parts = string.split('@');
    const urlParts = parts[parts.length - 1].split(':');

    const colNo = parseInt(urlParts[urlParts.length - 1], 10);
    const lineNo = parseInt(urlParts[urlParts.length - 2], 10);
    const url = urlParts.slice(0, -2).join(':');

    readUrl(url, data => {
        getPosition(data, lineNo, colNo, CONTEXT, done);
    });
}

function readUrl(url, done) {
    https.get(url, (resp) => {
        let data = '';

        // A chunk of data has been recieved
        resp.on('data', (chunk) => {
            data += chunk;
        });

        // The whole response has been received. Print out the result
        resp.on('end', () => {
            done(data);
        });

    }).on('error', (err) => {
        console.error(err.message);
    });
}

function getPosition(data, lineNo, colNo, context, done) {
    const lines = data.split('\n');
    const line = lines[lineNo - 1];
    const string = line.substr(Math.max(colNo - context, 0), 2 * context);

    let charNdx = Math.floor(string.length / 2) + 1;
    if (colNo + context > string.length) {
        charNdx = colNo > context ? context : colNo;
    }

    done(string, charNdx);
}
